@use '../vendor' as *;
@use 'breakpoints' as *;
@use 'typos' as *;
@use 'sass:map';

// MIXINS
// ==========

// Mappy Breakpoint shortcuts
// ----------
// Convenience mixin for Mappy Breakpoints
@mixin bp(
  $queries,
  $type: all,
  $query-fallback: null,
  $breakpoints: $breakpoints
) {
  @include mappy-bp($queries, $type, $query-fallback, $breakpoints) {
    @content;
  }
}

// Flex helper to make evenly-spaced grid items
// ----------
@mixin eq-flex-parent($gutter, $num-children) {
  display: flex;
  justify-content: space-between;
  margin-right: -1 * $gutter / 2;
  margin-left: -1 * $gutter / 2;

  > * {
    flex-basis: calc(#{100% / $num-children} - #{$gutter});
    margin-right: $gutter / 2;
    margin-left: $gutter / 2;
  }
}

@mixin eq-flex-child($gutter, $percent) {
  flex-basis: calc(#{$percent} - #{$gutter});
}

// Is-invisible
// ------------
// Makes element invisible, but still accessible
// - http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
@mixin is-invisible {
  position: absolute;
  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  border: 0;
  overflow: hidden;
  clip: rect(0 0 0 0);
}

// Is-visible
// ----------
// Turns off the element-invisible effect.
@mixin is-visible {
  position: static;
  width: auto;
  height: auto;
  overflow: auto;
  clip: auto;
}

@mixin lobo {
  & + *,
  * + & {
    @content;
  }
}

// Selection
// ---------
// Changes selected color and background color
@mixin selection($bg-color, $text-color) {
  &::selection {
    background: $bg-color;
    color: $text-color;
  }
}

// Typography mixins
// ==========

// Font Family mixins
// -----------
@mixin ff($family, $map: $font-families) {
  font-family: map.get($map, $family);
}

// Font Smoothing
// --------------
// Mixin to turn on font smoothing, especially for light text on dark
// background for OSX
@mixin font-smoothing($value: on) {
  @if $value == on {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  } @else {
    -webkit-font-smoothing: subpixel-antialiased;
    -moz-osx-font-smoothing: auto;
  }
}

// Text overflow
// -------------
// Requires inline-block or block for proper styling
@mixin text-overflow {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

// Links
// ==========

@mixin link-underline($background-color, $text-color) {
  background-image: linear-gradient($text-color, $text-color);
  background-repeat: repeat-x;
  background-size: 1px 1px;
}

// prettier-ignore
@mixin link-shadow ($background-color) {
  text-shadow: .03em 0 $background-color,
              -.03em 0 $background-color,
              0 .03em $background-color,
              0 -.03em $background-color,
              .06em 0 $background-color,
              -.06em 0 $background-color,
              .09em 0 $background-color,
              -.09em 0 $background-color,
              .12em 0 $background-color,
              -.12em 0 $background-color,
              .15em 0 $background-color,
              -.15em 0 $background-color;
}

@mixin remove-link-underline {
  background-image: none;
  text-shadow: none;
}

@mixin active-link {
  &::after {
    opacity: 1;
    transform: translateY(0);
  }
}

@mixin inactive-link {
  &::after {
    opacity: 0;
    transform: translateY(-150%);
  }
}

// Buttons
// ==========

@mixin btn-ghost(
  $border-color: var(--border-color, var(--color-primary-400)),
  $text-color: var(--text-color, var(--color-primary-400)),
  $border-width: 2px,
  $border-style: solid
) {
  border: $border-width $border-style $border-color;
  color: $text-color;
  background-color: transparent;
}

@mixin btn-filled(
  $background-color: var(--background-color, var(--color-primary-400)),
  $text-color: var(--text-color, var(--color-neutral-100)),
  $border-width: 2px,
  $border-style: solid
) {
  border: $border-width $border-style $background-color;
  color: $text-color;
  background-color: $background-color;
}

// Shape mixins
// ==========

// Square
// ------
@mixin square($size) {
  @include size($size, $size);
}

// Circle
// ------
@mixin circle($width) {
  width: $width;
  height: $width;
  border-radius: 100%;
}

// Triangle
// --------
// We use this to create isosceles triangles
// - $triangle-size -      Used to set border-size. No default, set a px or em
//                         size.
// - $triangle-color -     Used to set border-color which makes up triangle.
//                         No default
// - $triangle-direction - Used to determine which direction triangle points.
//                         Options: top, bottom, left, right
@mixin triangle($triangle-size, $triangle-color, $triangle-direction) {
  display: block;
  width: 0;
  height: 0;
  border: inset $triangle-size;
  content: '';

  @if $triangle-direction == top {
    border-top-style: solid;
    border-color: $triangle-color transparent transparent;
  }

  @if $triangle-direction == bottom {
    border-bottom-style: solid;
    border-color: transparent transparent $triangle-color;
  }

  @if $triangle-direction == left {
    border-left-style: solid;
    border-color: transparent transparent transparent $triangle-color;
  }

  @if $triangle-direction == right {
    border-right-style: solid;
    border-color: transparent $triangle-color transparent transparent;
  }
}
